{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Personal Knowledge Vault application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user.",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "KnowledgeEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "KnowledgeEntry",
      "type": "object",
      "description": "Represents a single knowledge entry in the Personal Knowledge Vault.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the knowledge entry."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N KnowledgeEntry)"
        },
        "title": {
          "type": "string",
          "description": "Title of the knowledge entry."
        },
        "contentType": {
          "type": "string",
          "description": "Type of content (TEXT, YOUTUBE_LINK, X_POST_LINK)."
        },
        "originalSource": {
          "type": "string",
          "description": "The raw text or URL pasted by the user."
        },
        "textForEmbedding": {
          "type": "string",
          "description": "The full, extracted text for vector embedding."
        },
        "tags": {
          "type": "array",
          "description": "Tags associated with the knowledge entry.",
          "items": {
            "type": "string"
          }
        },
        "chromaId": {
          "type": "string",
          "description": "ID returned from ChromaDB after vector ingestion."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the entry was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the entry was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "title",
        "contentType",
        "originalSource",
        "textForEmbedding",
        "createdAt",
        "updatedAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  The 'userId' parameter corresponds to the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/knowledge_entries/{knowledgeEntryId}",
        "definition": {
          "entityName": "KnowledgeEntry",
          "schema": {
            "$ref": "#/backend/entities/KnowledgeEntry"
          },
          "description": "Stores knowledge entries for each user. The 'userId' parameter ensures that only the authenticated user can access their own knowledge entries.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who owns the knowledge entry."
            },
            {
              "name": "knowledgeEntryId",
              "description": "The unique identifier for the knowledge entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure and scalable solution for the Personal Knowledge Vault application, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). It uses path-based ownership for user data and ensures data integrity through explicit state modeling and consistent naming conventions.\n\nAuthorization Independence:\nUser-owned knowledge entries are stored under `/users/{userId}/knowledge_entries/{knowledgeEntryId}`. This structure ensures that access control is based solely on the authenticated user's ID (`request.auth.uid`) matching the `userId` in the document, avoiding the need for `get()` calls in security rules.\n\nQAPs (Rules are not Filters):\nThe path-based ownership structure enables secure `list` operations. Security rules can efficiently filter knowledge entries based on the `userId` in the path, ensuring that users can only access their own data.\n\nDenormalization: The structure inherently avoids denormalization because the knowledge entries are directly nested under the user's document, making access control straightforward and efficient.\n\nStructural Segregation: All documents within the `/users/{userId}/knowledge_entries` collection share the same security requirements, ensuring a homogeneous security posture.\n\nAccess Modeling: Path-based ownership is used to model the `User 1:N KnowledgeEntry` relationship, providing a clear and secure way to manage access control.\n\nData Clarity and Predictability: The use of explicit fields like `contentType`, `createdAt`, and `updatedAt` ensures data clarity. Consistent naming conventions (e.g., `userId` for user references) enhance predictability and debuggability."
  }
}